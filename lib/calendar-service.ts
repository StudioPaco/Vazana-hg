// Google Calendar integration service
interface CalendarEvent {
  summary: string
  description: string
  start: {
    dateTime: string
    timeZone: string
  }
  end: {
    dateTime: string
    timeZone: string
  }
  location?: string
  attendees?: Array<{ email: string }>
}

interface JobCalendarData {
  jobNumber: string
  clientName: string
  workerName: string
  workerEmail?: string
  jobDate: string
  site: string
  city: string
  workType: string
  shiftType: string
  notes?: string
}

export class CalendarService {
  private accessToken: string
  private calendarId: string

  constructor() {
    this.accessToken = process.env.GOOGLE_CALENDAR_ACCESS_TOKEN || ""
    this.calendarId = process.env.GOOGLE_CALENDAR_ID || "primary"
  }

  async createJobEvent(jobData: JobCalendarData): Promise<{ success: boolean; data?: any; error?: string }> {
    if (!this.accessToken) {
      console.warn("Calendar service not configured - GOOGLE_CALENDAR_ACCESS_TOKEN missing")
      return { success: false, error: "Calendar service not configured" }
    }

    try {
      // Parse job date and create start/end times based on shift type
      const jobDate = new Date(jobData.jobDate)
      let startTime: Date
      let endTime: Date

      if (jobData.shiftType === "day") {
        startTime = new Date(jobDate)
        startTime.setHours(8, 0, 0, 0) // 8:00 AM
        endTime = new Date(jobDate)
        endTime.setHours(16, 0, 0, 0) // 4:00 PM
      } else {
        // night shift
        startTime = new Date(jobDate)
        startTime.setHours(20, 0, 0, 0) // 8:00 PM
        endTime = new Date(jobDate)
        endTime.setDate(endTime.getDate() + 1)
        endTime.setHours(6, 0, 0, 0) // 6:00 AM next day
      }

      const event: CalendarEvent = {
        summary: `Job #${jobData.jobNumber} - ${jobData.clientName}`,
        description: `
Work Type: ${jobData.workType}
Client: ${jobData.clientName}
Worker: ${jobData.workerName}
Location: ${jobData.site}, ${jobData.city}
Shift: ${jobData.shiftType}
${jobData.notes ? `Notes: ${jobData.notes}` : ""}

Generated by Vazana Studio
        `.trim(),
        start: {
          dateTime: startTime.toISOString(),
          timeZone: "Asia/Jerusalem",
        },
        end: {
          dateTime: endTime.toISOString(),
          timeZone: "Asia/Jerusalem",
        },
        location: `${jobData.site}, ${jobData.city}`,
        attendees: jobData.workerEmail ? [{ email: jobData.workerEmail }] : undefined,
      }

      const response = await fetch(`https://www.googleapis.com/calendar/v3/calendars/${this.calendarId}/events`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${this.accessToken}`,
        },
        body: JSON.stringify(event),
      })

      if (!response.ok) {
        const error = await response.text()
        throw new Error(`Calendar API error: ${error}`)
      }

      const result = await response.json()
      return { success: true, data: result }
    } catch (error) {
      console.error("Failed to create calendar event:", error)
      return { success: false, error: error instanceof Error ? error.message : "Unknown error" }
    }
  }

  async updateJobEvent(
    eventId: string,
    jobData: JobCalendarData,
  ): Promise<{ success: boolean; data?: any; error?: string }> {
    if (!this.accessToken) {
      return { success: false, error: "Calendar service not configured" }
    }

    try {
      const jobDate = new Date(jobData.jobDate)
      let startTime: Date
      let endTime: Date

      if (jobData.shiftType === "day") {
        startTime = new Date(jobDate)
        startTime.setHours(8, 0, 0, 0)
        endTime = new Date(jobDate)
        endTime.setHours(16, 0, 0, 0)
      } else {
        startTime = new Date(jobDate)
        startTime.setHours(20, 0, 0, 0)
        endTime = new Date(jobDate)
        endTime.setDate(endTime.getDate() + 1)
        endTime.setHours(6, 0, 0, 0)
      }

      const event: CalendarEvent = {
        summary: `Job #${jobData.jobNumber} - ${jobData.clientName}`,
        description: `
Work Type: ${jobData.workType}
Client: ${jobData.clientName}
Worker: ${jobData.workerName}
Location: ${jobData.site}, ${jobData.city}
Shift: ${jobData.shiftType}
${jobData.notes ? `Notes: ${jobData.notes}` : ""}

Generated by Vazana Studio
        `.trim(),
        start: {
          dateTime: startTime.toISOString(),
          timeZone: "Asia/Jerusalem",
        },
        end: {
          dateTime: endTime.toISOString(),
          timeZone: "Asia/Jerusalem",
        },
        location: `${jobData.site}, ${jobData.city}`,
        attendees: jobData.workerEmail ? [{ email: jobData.workerEmail }] : undefined,
      }

      const response = await fetch(
        `https://www.googleapis.com/calendar/v3/calendars/${this.calendarId}/events/${eventId}`,
        {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${this.accessToken}`,
          },
          body: JSON.stringify(event),
        },
      )

      if (!response.ok) {
        const error = await response.text()
        throw new Error(`Calendar API error: ${error}`)
      }

      const result = await response.json()
      return { success: true, data: result }
    } catch (error) {
      console.error("Failed to update calendar event:", error)
      return { success: false, error: error instanceof Error ? error.message : "Unknown error" }
    }
  }

  async deleteJobEvent(eventId: string): Promise<{ success: boolean; error?: string }> {
    if (!this.accessToken) {
      return { success: false, error: "Calendar service not configured" }
    }

    try {
      const response = await fetch(
        `https://www.googleapis.com/calendar/v3/calendars/${this.calendarId}/events/${eventId}`,
        {
          method: "DELETE",
          headers: {
            Authorization: `Bearer ${this.accessToken}`,
          },
        },
      )

      if (!response.ok) {
        const error = await response.text()
        throw new Error(`Calendar API error: ${error}`)
      }

      return { success: true }
    } catch (error) {
      console.error("Failed to delete calendar event:", error)
      return { success: false, error: error instanceof Error ? error.message : "Unknown error" }
    }
  }
}

export const calendarService = new CalendarService()
